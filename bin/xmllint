#!/usr/bin/env php
<?php

/**
 * Lint ruleset XML file.
 */

const RULESET = 'src/Ramsey/ruleset.xml';
const XML_SCHEMA = 'resources/XMLSchema.xsd';
const PHPCS_SCHEMA = 'vendor/squizlabs/php_codesniffer/phpcs.xsd';

// Change to the repository root.
chdir(realpath(dirname(__FILE__, 2)));

if (!is_readable(PHPCS_SCHEMA)) {
    echo "Unable to read phpcs.xsd; perhaps you forgot to run 'composer update'?\n";
    exit(1);
}

require_once 'vendor/autoload.php';

$printValidity = function (bool $isValid, string $filename): void {
    printf(
        '%s %s%s',
        $filename,
        $isValid ? 'validates' : 'fails to validate',
        PHP_EOL
    );
};

$phpcsSchemaContents = file_get_contents(PHPCS_SCHEMA);
$rulesetContents = file_get_contents(RULESET);

$phpcsSchema = new DOMDocument();
$phpcsSchema->loadXML($phpcsSchemaContents);
$isPhpcsSchemaValid = $phpcsSchema->schemaValidate(XML_SCHEMA);
$printValidity($isPhpcsSchemaValid, PHPCS_SCHEMA);

$ruleset = new DOMDocument();
$ruleset->loadXML($rulesetContents);
$isRulesetValid = $ruleset->schemaValidateSource($phpcsSchema->saveXML());
$printValidity($isRulesetValid, RULESET);

$builder = new \SebastianBergmann\Diff\Output\UnifiedDiffOutputBuilder('', true);
$differ = new \SebastianBergmann\Diff\Differ($builder);
$diff = $differ->diff($rulesetContents, $ruleset->saveXML());
$hasDifferences = $diff !== '';

if ($hasDifferences) {
    printf(
        '%$1sI found the following issues with %s.%$1sYou may fix these issues automatically with:%$1s%$1s  composer br:lint:fix%$1s%$1s%s%$1s',
        PHP_EOL,
        RULESET,
        $diff
    );
}

exit($isPhpcsSchemaValid && $isRulesetValid && !$hasDifferences ? 0 : 1);
